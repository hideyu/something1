version: "3.7"

services:
  react:
    # コンテナ名
    container_name: react
    # ビルドするdockerファイルが格納されたディレクトリ
    build:
      context: ./frontend
      dockerfile: Dockerfile.local
    # 正常起動後に実行するコマンド
    command: yarn start
    # ボリュームをマウントしておいてホットリロードっぽくしてる
    volumes:
      - ./frontend:/usr/src/app
    ports:
      # ホスト側のポート：コンテナ側のポート
      - 3000:3000

  django:
    # コンテナ名
    container_name: django
    # ビルドするdockerファイルが格納されたディレクトリ
    build:
      context: ./backend/django
      dockerfile: Dockerfile.local
    # 正常起動後に実行するコマンド
    command: python3 manage.py runserver 0.0.0.0:8000
    volumes:
      # マウントするディレクトリ
      #（ホストのdjangoディレクトリとコンテナのディレクトリを同期するみたいな感じ）
      - ./backend/django:/usr/src/app/
    ports:
      # ホスト側のポート：コンテナ側のポート
      - 8000:8000
    env_file:
      # 環境変数に設定するファイル
      - ./backend/django/.env
    depends_on:
      # 接続するサービス（サービス間のネットワークについては自動で作成されるので定義は不要）
      - postgres

  postgres:
    container_name: postgres
    build:
      context: ./backend/postgres
      dockerfile: Dockerfile
    volumes:
      # DBのデータはネームドボリュームを作成して保存
      # ディレクトリとマウントとって実データをホストOSに直接残しても良い
      # コンテナの/var/lib/postgresql/dataにDBのデータが格納されている
      - postgres_data:/var/lib/postgresql/data
      ## down -vなどでボリュームがない時などを含めた初回起動時に実行されるファイルを指定
      # - ./postgres/sql:/docker-entrypoint-initdb.d
    env_file: ./backend/postgres/.env_db
    ports:
      # ホスト側のポートはローカルのpsqlとバッティングするので5432以外にする
      - 5434:5432

volumes:
  postgres_data: